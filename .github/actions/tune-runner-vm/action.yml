#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Tune Runner VM performance
description: tunes the operation system performance related parameters for maximum performance of the Runner VM
inputs:
  no_tmpfs:
    description: "Set to true to skip configuring tmpfs for /tmp"
    required: false
runs:
  using: composite
  steps:
    - run: |
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
          set -x
          sudo bash -c "while ! systemctl is-system-running; do echo 'Waiting for systemctl to complete startup'; sleep 1; done"
          # disable discard/trim at device level since remount with nodiscard doesn't seem to be effective
          # https://www.spinics.net/lists/linux-ide/msg52562.html
          for i in /sys/block/sd*/queue/discard_max_bytes; do
            echo 0|sudo tee $i
          done
          sudo mount -o remount,nodiscard,commit=999999,barrier=0 /
          sudo mount -o remount,nodiscard,commit=999999,barrier=0 /mnt
          echo 1 | sudo tee /proc/sys/vm/swappiness
          echo madvise | sudo tee /sys/kernel/mm/transparent_hugepage/enabled
          # disable any background jobs that run SSD discard/trim
          sudo systemctl disable fstrim.timer || true
          sudo systemctl stop fstrim.timer || true
          sudo systemctl disable fstrim.service || true
          sudo systemctl stop fstrim.service || true

          # enable docker experimental mode which is
          # required for using "docker build --squash" / "-Ddockerfile.build.squash=true"
          daemon_json="$(sudo cat /etc/docker/daemon.json  | jq '.experimental = true')"
          echo "$daemon_json" | sudo tee /etc/docker/daemon.json
          # use pure go resolver for Docker
          sudo mkdir /etc/systemd/system/docker.service.d
          echo -e '[Service]\nEnvironment="GODEBUG=netdns=go"' | sudo tee /etc/systemd/system/docker.service.d/netdns.conf
          sudo systemctl daemon-reload
          # restart docker daemon
          sudo systemctl restart docker

          # configure retries for apt since downloads fail occasionally
          echo 'APT::Acquire::Retries "3";' | sudo tee /etc/apt/apt.conf.d/80-retries
          # update apt package listing with retries so that installation doesn't require "apt-get update"
          sudo bash -c "apt-get update || (sleep 5; apt-get update) || (sleep 5; apt-get update)" > /dev/null
          # install eatmydata package
          sudo apt-get -y install eatmydata

          if [[ "${{ inputs.no_tmpfs }}" != "true" ]]; then
              # add another swapfile so that tmpfs can overflow to swap
              sudo bash -c 'sudo fallocate -l 4G /mnt/swapfile2; chmod 0600 /mnt/swapfile2; mkswap /mnt/swapfile2; swapon /mnt/swapfile2'
              # enable /tmp on tmpfs with 2000M maxsize
              sudo bash -c 'cp /usr/share/systemd/tmp.mount /etc/systemd/system/;systemctl enable tmp.mount;systemctl start tmp.mount;mount -o remount,size=2000M /tmp'
          fi
        fi
      shell: bash
