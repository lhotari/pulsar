#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Pulsar CI
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - branch-*

env:
  MAVEN_OPTS: -Dmaven.test.failure.ignore=true -DtestRetryCount=0 -Xmx1024m -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
  GODEBUG: netdns=go

jobs:
  skip_check_job:
    name: 'Check if workflow should be skipped'
    runs-on: ubuntu-20.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          paths_ignore: '["site2/**", "deployment/**"]'
          skip_after_successful_duplicate: 'false'
          cancel_others: 'false'

  build-and-license-check:
    needs: skip_check_job
    if: ${{ needs.skip_check_job.outputs.should_skip != 'true' }}
    name: Build and License check
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    steps:
      - name: Checkout pull request HEAD commit
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout pushed commit on branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      - name: Tune OS
        uses: ./.github/actions/tune-os

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/pulsar
          key: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Replace maven's wagon-http version
        run: sudo ./build/replace_maven-wagon-http-version.sh

      - name: Check source code license headers
        run: mvn -B -T 8 -ntp initialize license:check

      - name: Build core-modules
        run: mvn -B -T 1C -ntp -Pcore-modules clean install -DskipTests -Dspotbugs.skip=true -Dlicense.skip=true

      - name: Check binary licenses
        run: src/check-binary-license ./distribution/server/target/apache-pulsar-*-bin.tar.gz

      - name: Start HTTP proxy for Github artifact cache
        uses: cirruslabs/http-cache-action@master

      - name: Save maven build results to Github artifact cache so that the results can be reused
        run: |
          set -xe
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'tar --exclude .m2/repository/org/apache/pulsar/pulsar-io-data-generator \
              --exclude .m2/repository/org/apache/pulsar/pulsar-io-cassandra \
              --exclude .m2/repository/org/apache/pulsar/pulsar-io-twitter \
          -cf - .m2/repository/org/apache/pulsar \
          | curl -s -H "Content-Type: application/octet-stream" \
            -X POST --data-binary @- \
            http://localhost:12321/pulsar-build-${{ github.sha }}'

      - name: Save pulsar-io data-generator .nar file to Github artifact cache so that the results can be reused
        run: |
          set -xe
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'tar -cf - .m2/repository/org/apache/pulsar/pulsar-io-data-generator \
          | curl -s -H "Content-Type: application/octet-stream" \
            -X POST --data-binary @- \
            http://localhost:12321/pulsar-io-data-generator-${{ github.sha }}'

      - name: Save pulsar-io cassandra and twitter .nar files to Github artifact cache so that the results can be reused
        run: |
          set -xe
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'tar -cf - .m2/repository/org/apache/pulsar/pulsar-io-{cassandra,twitter} \
          | curl -s -H "Content-Type: application/octet-stream" \
            -X POST --data-binary @- \
            http://localhost:12321/pulsar-io-samples-${{ github.sha }}'

  unit-tests:
    name: CI - Unit - ${{ matrix.name }}
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    needs: build-and-license-check
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: Other
            group: OTHER
            setup: |
              cd $HOME
              # restore pulsar-io cassandra and twitter .nar files
              $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-io-samples-${{ github.sha }} | tar xf -'
          - name: Brokers - Broker Group 1
            group: BROKER_GROUP_1
          - name: Brokers - Broker Group 2
            group: BROKER_GROUP_2
          - name: Brokers - Client Api
            group: BROKER_CLIENT_API
          - name: Brokers - Client Impl
            group: BROKER_CLIENT_IMPL
          - name: Brokers - Other
            group: BROKER_CLIENT_OTHER
          - name: Proxy
            group: PROXY

    steps:
      - name: Checkout pull request HEAD commit
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout pushed commit on branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      - name: Tune OS
        uses: ./.github/actions/tune-os

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/pulsar
          key: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Replace maven's wagon-http version
        run: sudo ./build/replace_maven-wagon-http-version.sh

      - name: Start HTTP proxy for Github artifact cache
        uses: cirruslabs/http-cache-action@master

      - name: Restore maven build results from Github artifact cache
        run: |
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-build-${{ github.sha }} | tar xf -'

      - name: Restore pulsar-io data-generator nar file
        run: |
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-io-data-generator-${{ github.sha }} | tar xf -'

      - name: Run setup commands
        if: matrix.setup
        run: |
          set -xe
          ${{ matrix.setup }}

      - name: Run unit test group '${{ matrix.group }}'
        run: |
          ./build/run_unit_group.sh ${{ matrix.group }}

      - name: Publish Test Results as GitHub Action annotations
        uses: mikepenz/action-junit-report@v2
        if: ${{ always() }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: '**/target/surefire-reports/junitreports/TEST-*.xml'
          check_name: "Test Report - Unit - ${{ matrix.name }}"

      - name: Copy test reports to single directory for XUnit Viewer
        if: ${{ always() }}
        run: |
          mkdir test-reports
          # copy test reports to single directory, rename duplicates
          find -path '*/target/surefire-reports/junitreports/TEST-*.xml' | xargs -r -n 1 cp -t test-reports --backup=numbered
          # rename possible duplicates to have ".xml" extension
          (
            for f in test-reports/*~; do
                mv -- "$f" "${f}.xml"
            done 2>/dev/null
          ) || true
      - name: Report test summary as warning
        if: ${{ always() }}
        run: |
          echo 'Installing tooling...'
          sudo bash -c 'apt-get update && apt-get -y install xmlstarlet junitparser' >/dev/null
          echo 'Done. Parsing test reports...'
          junitparser merge test-reports/*.xml merged.xml || true
          if [ -f merged.xml ]; then
            xmlstarlet sel -T -t -m /testsuites -o "::warning ::Test Summary for Unit - ${{ matrix.name }}: " -v '@tests' -o ' tests, ' -v '@failures' -o ' failures, ' -v '@errors' -o ' errors, ' -v '@skipped' -o ' skipped, duration ' -v 'number(@time)' -o 's'  merged.xml
          fi
      - name: Convert test results to single html page with XUnit Viewer
        id: xunit-viewer
        uses: AutoModality/action-xunit-viewer@v1
        if: ${{ always() }}
        with:
          title: "${{ github.workflow }} - CI - Unit - ${{ matrix.name }} - job:${{ github.job }} - ref:${{ github.ref }} - pr sha:${{ github.event.pull_request.head.sha }} - sha: ${{ github.sha }}"
          fail: false
      - name: Publish the XUnit Viewer report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Unit-${{ matrix.group }}-test-report
          path: test-reports

      - name: Package Surefire artifacts
        if: ${{ always() }}
        run: |
          rm -rf artifacts
          mkdir artifacts
          find . -type d -path '*/target/surefire-reports' -not -path './artifacts/*' | xargs -r cp --parents -t artifacts -R

      - name: Upload Surefire artifacts
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Unit-${{ matrix.group }}-surefire-artifacts
          path: artifacts

  pulsar-java-test-image:
    name: Build Pulsar java-test-image docker image
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    needs: build-and-license-check
    steps:
      - name: Checkout pull request HEAD commit
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout pushed commit on branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      - name: Tune OS
        uses: ./.github/actions/tune-os

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/pulsar
          key: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}-integration-tests
          restore-keys: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Replace maven's wagon-http version
        run: sudo ./build/replace_maven-wagon-http-version.sh

      - name: Start HTTP proxy for Github artifact cache
        uses: cirruslabs/http-cache-action@master

      - name: restore maven build results from Github artifact cache
        run: |
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-build-${{ github.sha }} | tar xf -'

      - name: Build java-test-image docker image
        run: |
          # build docker image
          mvn -B -am -pl tests/docker-images/java-test-image install -Pdocker -Dmaven.test.skip=true -Ddockerfile.build.squash=true -Dassembly.skipAssembly=true -DskipSourceReleaseAssembly=true -Dspotbugs.skip=true -Dlicense.skip=true

      - name: save docker image apachepulsar/java-test-image:latest to Github artifact cache
        run: |
          echo 'Installing pv'
          sudo bash -c 'apt-get update && apt-get -y install pv || true' > /dev/null
          echo 'Done.'
          echo 'Saving docker image apachepulsar/java-test-image:latest'
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'docker save apachepulsar/java-test-image:latest | zstd | pv -ft -i 5 | pv -Wbaf -i 5 | curl -s -H "Content-Type: application/octet-stream" -X POST --data-binary @- http://localhost:12321/pulsar-java-test-image-${{ github.sha }}'


  integration-tests:
    name: CI - Integration - ${{ matrix.name }}
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    needs: [pulsar-java-test-image, unit-tests]
    env:
      PULSAR_TEST_IMAGE_NAME: apachepulsar/java-test-image:latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: Shade
            group: SHADE

          - name: Backwards Compatibility
            group: BACKWARDS_COMPAT

          - name: Cli
            group: CLI

          - name: Function State
            group: FUNCTION_STATE

          - name: Messaging
            group: MESSAGING

          - name: Schema
            group: SCHEMA

          - name: Standalone
            group: STANDALONE

          - name: Transaction
            group: TRANSACTION

    steps:
      - name: Checkout pull request HEAD commit
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout pushed commit on branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      - name: Tune OS
        uses: ./.github/actions/tune-os

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/pulsar
          key: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}-integration-tests
          restore-keys: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Replace maven's wagon-http version
        run: sudo ./build/replace_maven-wagon-http-version.sh

      - name: Start HTTP proxy for Github artifact cache
        uses: cirruslabs/http-cache-action@master

      - name: Restore maven build results from Github artifact cache
        run: |
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-build-${{ github.sha }} | tar xf -'

      - name: Load docker image apachepulsar/java-test-image:latest from Github artifact cache
        run: |
          echo 'Installing pv'
          sudo bash -c 'apt-get update && apt-get -y install pv || true' > /dev/null
          echo 'Done.'
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-java-test-image-${{ github.sha }} | pv -batf -i 5 | unzstd | docker load'

      - name: Run setup commands
        if: matrix.setup
        run: |
          set -xe
          ${{ matrix.setup }}

      - name: Run integration test group '${{ matrix.group }}'
        run: |
          ./build/run_integration_group.sh ${{ matrix.group }}

      - name: Publish Test Results as GitHub Action annotations
        uses: mikepenz/action-junit-report@v2
        if: ${{ always() }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: '**/target/surefire-reports/junitreports/TEST-*.xml'
          check_name: "Test Report - Integration - ${{ matrix.name }}"

      - name: Copy test reports to single directory for XUnit Viewer
        if: ${{ always() }}
        run: |
          mkdir test-reports
          # copy test reports to single directory, rename duplicates
          find -path '*/target/surefire-reports/junitreports/TEST-*.xml' | xargs -r -n 1 cp -t test-reports --backup=numbered
          # rename possible duplicates to have ".xml" extension
          (
            for f in test-reports/*~; do
                mv -- "$f" "${f}.xml"
            done 2>/dev/null
          ) || true
      - name: Report test summary as warning
        if: ${{ always() }}
        run: |
          echo 'Installing tooling...'
          sudo bash -c 'apt-get update && apt-get -y install xmlstarlet junitparser' >/dev/null
          echo 'Done. Parsing test reports...'
          junitparser merge test-reports/*.xml merged.xml || true
          if [ -f merged.xml ]; then
            xmlstarlet sel -T -t -m /testsuites -o "::warning ::Test Summary for Integration - ${{ matrix.name }}: " -v '@tests' -o ' tests, ' -v '@failures' -o ' failures, ' -v '@errors' -o ' errors, ' -v '@skipped' -o ' skipped, duration ' -v 'number(@time)' -o 's'  merged.xml
          fi
      - name: Convert test results to single html page with XUnit Viewer
        id: xunit-viewer
        uses: AutoModality/action-xunit-viewer@v1
        if: ${{ always() }}
        with:
          title: "${{ github.workflow }} - CI - Integration - ${{ matrix.name }} - job:${{ github.job }} - ref:${{ github.ref }} - pr sha:${{ github.event.pull_request.head.sha }} - sha: ${{ github.sha }}"
          fail: false
      - name: Publish the XUnit Viewer report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Integration-${{ matrix.group }}-test-report
          path: test-reports

      - name: Package Surefire artifacts
        if: ${{ always() }}
        run: |
          rm -rf artifacts
          mkdir artifacts
          find . -type d -path '*/target/surefire-reports' -not -path './artifacts/*' | xargs -r cp --parents -t artifacts -R

      - name: Upload Surefire artifacts
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Integration-${{ matrix.group }}-surefire-artifacts
          path: artifacts

  pulsar-test-latest-version-image:
    name: Build Pulsar docker image
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    needs: build-and-license-check
    steps:
      - name: Checkout pull request HEAD commit
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout pushed commit on branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      - name: Tune OS
        uses: ./.github/actions/tune-os

      - name: Clean Disk
        uses: ./.github/actions/clean-disk

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/pulsar
          key: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}-full-build
          restore-keys: |
            ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}-integration-tests
            ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Replace maven's wagon-http version
        run: sudo ./build/replace_maven-wagon-http-version.sh

      - name: Start HTTP proxy for Github artifact cache
        uses: cirruslabs/http-cache-action@master

      - name: restore maven build results from Github artifact cache
        run: |
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-build-${{ github.sha }} | tar xf -'

      - name: Build latest-version-image docker image
        run: |
          # build docker image
          # include building of Pulsar SQL, Connectors, Offloaders and server distros
          mvn -B -am -pl pulsar-sql/presto-distribution,distribution/io,distribution/offloaders,distribution/server,tests/docker-images/latest-version-image install -Pmain,docker -Dmaven.test.skip=true -Ddockerfile.build.squash=true -Dspotbugs.skip=true -Dlicense.skip=true

      - name: save docker image apachepulsar/pulsar-test-latest-version:latest to Github artifact cache
        run: |
          echo 'Installing pv'
          sudo bash -c 'apt-get update && apt-get -y install pv || true' > /dev/null
          echo 'Done.'
          echo 'Saving docker image apachepulsar/pulsar-test-latest-version:latest'
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'docker save apachepulsar/pulsar-test-latest-version:latest | zstd | pv -ft -i 5 | pv -Wbaf -i 5 | curl -s -H "Content-Type: application/octet-stream" -X POST --data-binary @- http://localhost:12321/pulsar-test-latest-version-image-${{ github.sha }}'

  system-tests:
    name: CI - System - ${{ matrix.name }}
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    needs: [pulsar-test-latest-version-image, unit-tests]
    env:
      PULSAR_TEST_IMAGE_NAME: apachepulsar/pulsar-test-latest-version:latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: Tiered FileSystem
            group: TIERED_FILESYSTEM

          - name: Tiered JCloud
            group: TIERED_JCLOUD

          - name: Pulsar Connectors - Thread
            group: PULSAR_CONNECTORS_THREAD

          - name: Pulsar Connectors - Process
            group: PULSAR_CONNECTORS_PROCESS

          - name: Sql
            group: SQL

    steps:
      - name: Checkout pull request HEAD commit
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout pushed commit on branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2


      - name: Tune OS
        uses: ./.github/actions/tune-os

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/pulsar
          key: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}-integration-tests
          restore-keys: ${{ runner.os }}-m2repository-${{ hashFiles('**/pom.xml') }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Replace maven's wagon-http version
        run: sudo ./build/replace_maven-wagon-http-version.sh

      - name: Start HTTP proxy for Github artifact cache
        uses: cirruslabs/http-cache-action@master

      - name: Restore maven build results from Github artifact cache
        run: |
          cd $HOME
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-build-${{ github.sha }} | tar xf -'

      - name: Load docker image apachepulsar/pulsar-test-latest-version:latest from Github artifact cache
        run: |
          echo 'Installing pv'
          sudo bash -c 'apt-get update && apt-get -y install pv || true' > /dev/null
          echo 'Done.'
          $GITHUB_WORKSPACE/build/retry.sh bash -c 'curl -s http://localhost:12321/pulsar-test-latest-version-image-${{ github.sha }} | pv -batf -i 5 | unzstd | docker load'

      - name: Run setup commands
        if: matrix.setup
        run: |
          set -xe
          ${{ matrix.setup }}

      - name: Run system test group '${{ matrix.group }}'
        run: |
          ./build/run_integration_group.sh ${{ matrix.group }}

      - name: Publish Test Results as GitHub Action annotations
        uses: mikepenz/action-junit-report@v2
        if: ${{ always() }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: '**/target/surefire-reports/junitreports/TEST-*.xml'
          check_name: "Test Report - System - ${{ matrix.name }}"

      - name: Copy test reports to single directory for XUnit Viewer
        if: ${{ always() }}
        run: |
          mkdir test-reports
          # copy test reports to single directory, rename duplicates
          find -path '*/target/surefire-reports/junitreports/TEST-*.xml' | xargs -r -n 1 cp -t test-reports --backup=numbered
          # rename possible duplicates to have ".xml" extension
          (
            for f in test-reports/*~; do
                mv -- "$f" "${f}.xml"
            done 2>/dev/null
          ) || true
      - name: Report test summary as warning
        if: ${{ always() }}
        run: |
          echo 'Installing tooling...'
          sudo bash -c 'apt-get update && apt-get -y install xmlstarlet junitparser' >/dev/null
          echo 'Done. Parsing test reports...'
          junitparser merge test-reports/*.xml merged.xml || true
          if [ -f merged.xml ]; then
            xmlstarlet sel -T -t -m /testsuites -o "::warning ::Test Summary for System - ${{ matrix.name }}: " -v '@tests' -o ' tests, ' -v '@failures' -o ' failures, ' -v '@errors' -o ' errors, ' -v '@skipped' -o ' skipped, duration ' -v 'number(@time)' -o 's'  merged.xml
          fi
      - name: Convert test results to single html page with XUnit Viewer
        id: xunit-viewer
        uses: AutoModality/action-xunit-viewer@v1
        if: ${{ always() }}
        with:
          title: "${{ github.workflow }} - CI - System - ${{ matrix.name }} - job:${{ github.job }} - ref:${{ github.ref }} - pr sha:${{ github.event.pull_request.head.sha }} - sha: ${{ github.sha }}"
          fail: false
      - name: Publish the XUnit Viewer report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: System-${{ matrix.group }}-test-report
          path: test-reports

      - name: Package Surefire artifacts
        if: ${{ always() }}
        run: |
          rm -rf artifacts
          mkdir artifacts
          find . -type d -path '*/target/surefire-reports' -not -path './artifacts/*' | xargs -r cp --parents -t artifacts -R

      - name: Upload Surefire artifacts
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: System-${{ matrix.name }}-surefire-artifacts
          path: artifacts